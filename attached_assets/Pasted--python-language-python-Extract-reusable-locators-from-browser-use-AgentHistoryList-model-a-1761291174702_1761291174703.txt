```python
# language: python
# Extract reusable locators from browser-use AgentHistoryList.model_actions()
from pydantic import BaseModel
from typing import List, Dict
import re

class Locator(BaseModel):
    name: str
    selector: str
    action_examples: List[str] = []

def _normalize_name(selector: str) -> str:
    s = re.sub(r'[^0-9a-zA-Z_]+', '_', selector).strip('_')
    s = re.sub(r'__+', '_', s)
    return (s[:50] or "locator").lower()

def extract_locators(actions: List[dict]) -> Dict[str, Locator]:
    """
    Scan model_actions() and return deduplicated locators with example actions.
    Pass history.model_actions() as `actions`.
    """
    keys_to_check = ("selector", "index_selector", "query", "xpath", "css", "aria", "text")
    seen: Dict[str, Locator] = {}
    for a in actions:
        params = a.get("params", {}) or {}
        # find first plausible selector param
        sel = None
        for k in keys_to_check:
            v = params.get(k)
            if v:
                sel = v
                break
        # fallback: some actions embed "target" or "target_selector"
        if not sel:
            sel = params.get("target") or params.get("target_selector")
        if not sel:
            continue
        sel = str(sel).strip()
        if not sel:
            continue
        # normalize trivial wrappers (keep as-is if starts with // or css= or text=)
        # otherwise prefer quoted string selectors
        name_base = _normalize_name(sel)
        name = name_base
        idx = 1
        while name in seen:
            idx += 1
            name = f"{name_base}_{idx}"
        seen[name] = Locator(
            name=name,
            selector=sel,
            action_examples=[f"{a.get('name')}({params})"]
        )
    return seen

# Example helper to print Playwright-ready constants
def print_playwright_locators(locators: Dict[str, Locator]) -> None:
    print("# Playwright locators (copy into your script)")
    for name, loc in locators.items():
        comment = ", ".join(loc.action_examples)[:120]
        print(f'{name.upper()} = r"{loc.selector}"  # {comment}')

# Usage:
# history = await agent.run(...)  # your existing run
# actions = history.model_actions()
# locs = extract_locators(actions)
# print_playwright_locators(locs)
```