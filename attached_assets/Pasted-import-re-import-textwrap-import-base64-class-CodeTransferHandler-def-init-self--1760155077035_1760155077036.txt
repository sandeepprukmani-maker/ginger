import re
import textwrap
import base64

class CodeTransferHandler:
    def __init__(self):
        self.indent_size = 4
    
    def encode_code(self, code):
        """Encode code for safe transfer"""
        # Normalize line endings and indentation
        code = code.replace('\r\n', '\n').replace('\r', '\n')
        code = textwrap.dedent(code)
        
        # Encode to base64 to preserve formatting
        encoded = base64.b64encode(code.encode('utf-8')).decode('utf-8')
        return encoded
    
    def decode_and_fix_code(self, encoded_code):
        """Decode and fix code after transfer"""
        try:
            # Decode from base64
            decoded = base64.b64decode(encoded_code.encode('utf-8')).decode('utf-8')
            
            # Fix common issues
            fixed_code = self._fix_indentation_issues(decoded)
            fixed_code = self._ensure_proper_blocks(fixed_code)
            
            return fixed_code
        except Exception as e:
            raise ValueError(f"Failed to decode code: {e}")
    
    def _fix_indentation_issues(self, code):
        """Fix various indentation problems"""
        lines = code.split('\n')
        fixed_lines = []
        
        for line in lines:
            # Remove mixed tabs and spaces, convert to spaces
            line = line.replace('\t', ' ' * self.indent_size)
            fixed_lines.append(line)
        
        return '\n'.join(fixed_lines)
    
    def _ensure_proper_blocks(self, code):
        """Ensure code blocks have proper structure"""
        # Fix try-except blocks without proper indentation
        code = re.sub(r'except:(?!\s)', 'except:\n    pass', code)
        code = re.sub(r'finally:(?!\s)', 'finally:\n    pass', code)
        code = re.sub(r'else:(?!\s)', 'else:\n    pass', code)
        
        return code

# Usage in your application
code_handler = CodeTransferHandler()

# Server side - sending
def send_healing_code(server, code, test_id):
    encoded_code = code_handler.encode_code(code)
    server.emit('healing_code', {
        'test_id': test_id,
        'code': encoded_code
    })

# Client side - receiving and executing
def execute_healing_attempt(encoded_code, global_vars, local_vars):
    try:
        fixed_code = code_handler.decode_and_fix_code(encoded_code)
        exec(fixed_code, global_vars, local_vars)
        return True, "Execution successful"
    except Exception as e:
        return False, str(e)