Agent registered successfully: {'status': 'success'}
Received packet MESSAGE data 2["agent_registered",{"status":"success"}]
Received event "agent_registered" [/]
Received packet MESSAGE data 2["agents_update",{"agents":[{"agent_id":"d5c13b33-5f47-4ef6-9db7-a7a05c85d0cd","browsers":["chromium"],"connected_at":"2025-10-10T22:54:38.014447"}]}]
Received event "agents_update" [/]
Received packet MESSAGE data 2["agents_update",{"agents":[{"agent_id":"d5c13b33-5f47-4ef6-9db7-a7a05c85d0cd","browsers":["chromium"],"connected_at":"2025-10-10T22:54:38.014447"}]}]
Received event "agents_update" [/]
Received packet MESSAGE data 2["execution_status",{"test_id":28,"status":"running","message":"Executing on agent with healing in headful mode..."}]
Received event "execution_status" [/]
Received packet MESSAGE data 2["execute_healing_attempt",{"test_id":28,"code":"\nasync def run_test(browser_name='chromium', headless=True):\n    from playwright.async_api import async_playwright\n    logs = []\n    screenshot = None\n    browser = None\n    page = None\n    try:\n        async with async_playwright() as p:\n            browser = await getattr(p, browser_name).launch(headless=headless)\n            page = await browser.new_page()\n            await page.goto(\"https://practicetestautomation.com/practice-test-login/\")\n            logs.append(\"Navigated to the login page\")\n\n            await page.fill(\"input[name='username']\", \"student\")\n            logs.append(\"Filled username\")\n\n            await page.fill(\"input[name='password']\", \"Password123\")\n            logs.append(\"Filled password\")\n\n            await page.click(\"button[type='submit']\")\n            logs.append(\"Clicked submit button\")\n\n            # CRITICAL: Screenshot BEFORE closing\n            screenshot = await page.screenshot()\n            await browser.close()\n            return {'success': True, 'logs': logs, 'screenshot': screenshot}\n    except Exception as e:\n        logs.append(f\"Error: {str(e)}\")\n        # Try to get screenshot even on error, BEFORE cleanup\n        if page:\n            try:\n                screenshot = await page.screenshot()\n            except:\n                pass\n        if browser:\n            try:\n                await browser.close()\n            except:\n                pass\n        return {'success': False, 'logs': logs, 'screenshot': screenshot}\n","browser":"chromium","mode":"headful","attempt":1}]
Received event "execute_healing_attempt" [/]
Traceback (most recent call last):
  File "C:\Users\Sandeep\Downloads\VisionVault (2)\VisionVault\local_agent (5).py", line 226, in execute_healing_attempt
    exec(modified_code, global_vars, local_vars)
    ~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<string>", line 14
    globals()["__healing_page__"] = page
IndentationError: unexpected indent
Emitting event "healing_attempt_result" [/]
Sending packet MESSAGE data 2["healing_attempt_result",{"test_id":28,"success":false,"logs":["unexpected indent (<string>, line 14)"],"screenshot":null}]
Healing attempt error: unexpected indent (<string>, line 14)
Received packet PING data 
Sending packet PONG data 
