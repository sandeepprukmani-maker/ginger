"""Generate Playwright scripts from captured actions."""
from typing import List
from action_capture import PlaywrightAction


class PlaywrightScriptGenerator:
    """Generates executable Playwright scripts."""
    
    def __init__(self, async_mode: bool = False):
        self.async_mode = async_mode
        
    def generate(self, actions: List[PlaywrightAction], task_description: str = None) -> str:
        """Generate a complete Playwright script."""
        if self.async_mode:
            return self._generate_async(actions, task_description)
        return self._generate_sync(actions, task_description)
    
    def _generate_sync(self, actions: List[PlaywrightAction], task_description: str = None) -> str:
        """Generate synchronous Playwright script."""
        script_lines = []
        
        # Header
        script_lines.append('"""')
        if task_description:
            script_lines.append(f'Task: {task_description}')
        script_lines.append('Generated by NL2Playwright')
        script_lines.append('"""')
        script_lines.append('from playwright.sync_api import sync_playwright, expect')
        script_lines.append('')
        script_lines.append('')
        script_lines.append('def run():')
        script_lines.append('    with sync_playwright() as p:')
        script_lines.append('        # Launch browser')
        script_lines.append('        browser = p.chromium.launch(headless=False, slow_mo=500)')
        script_lines.append('        context = browser.new_context()')
        script_lines.append('        page = context.new_page()')
        script_lines.append('')
        
        # Track pages/tabs
        pages_created = {'page': 0}
        current_page_var = 'page'
        
        # Generate actions
        for action in actions:
            # Add comment
            if action.comment:
                script_lines.append(f'        # {action.comment}')
            
            # Generate action code
            if action.action_type == 'goto':
                script_lines.append(f'        {current_page_var}.goto("{action.url}")')
                script_lines.append(f'        {current_page_var}.wait_for_load_state("networkidle")')
                
            elif action.action_type == 'click':
                script_lines.append(f'        {current_page_var}.locator(\'{action.selector}\').click()')
                script_lines.append(f'        {current_page_var}.wait_for_load_state("domcontentloaded")')
                
            elif action.action_type == 'fill':
                script_lines.append(f'        {current_page_var}.locator(\'{action.selector}\').fill("{action.value}")')
                
            elif action.action_type == 'press':
                script_lines.append(f'        {current_page_var}.keyboard.press("{action.value}")')
                
            elif action.action_type == 'scroll':
                if ':' in action.value:
                    direction, amount = action.value.split(':')
                    if direction == 'down':
                        script_lines.append(f'        {current_page_var}.mouse.wheel(0, {amount})')
                    else:
                        script_lines.append(f'        {current_page_var}.mouse.wheel(0, -{amount})')
                else:
                    script_lines.append(f'        {current_page_var}.evaluate("window.scrollBy(0, window.innerHeight)")')
                    
            elif action.action_type == 'wait':
                duration = int(action.value)
                script_lines.append(f'        {current_page_var}.wait_for_timeout({duration})')
                
            elif action.action_type == 'new_tab':
                new_page_num = len(pages_created)
                new_page_var = f'page{new_page_num}' if new_page_num > 0 else 'page'
                pages_created[new_page_var] = new_page_num
                script_lines.append(f'        {new_page_var} = context.new_page()')
                current_page_var = new_page_var
                
            elif action.action_type == 'switch_tab':
                tab_idx = int(action.value)
                if tab_idx == 0:
                    current_page_var = 'page'
                else:
                    current_page_var = f'page{tab_idx}'
                script_lines.append(f'        # Switching to {current_page_var}')
                
            elif action.action_type == 'alert':
                if ':' in action.value:
                    alert_action, text = action.value.split(':', 1)
                else:
                    alert_action = action.value
                    text = None
                    
                if alert_action == 'accept':
                    script_lines.append(f'        {current_page_var}.on("dialog", lambda dialog: dialog.accept())')
                elif alert_action == 'dismiss':
                    script_lines.append(f'        {current_page_var}.on("dialog", lambda dialog: dialog.dismiss())')
                elif alert_action == 'text' and text:
                    script_lines.append(f'        {current_page_var}.on("dialog", lambda dialog: dialog.accept("{text}"))')
            
            script_lines.append('')
        
        # Footer
        script_lines.append('        # Keep browser open for inspection')
        script_lines.append('        # input("Press Enter to close browser...")')
        script_lines.append('')
        script_lines.append('        browser.close()')
        script_lines.append('')
        script_lines.append('')
        script_lines.append('if __name__ == "__main__":')
        script_lines.append('    run()')
        script_lines.append('')
        
        return '\n'.join(script_lines)
    
    def _generate_async(self, actions: List[PlaywrightAction], task_description: str = None) -> str:
        """Generate asynchronous Playwright script."""
        script_lines = []
        
        # Header
        script_lines.append('"""')
        if task_description:
            script_lines.append(f'Task: {task_description}')
        script_lines.append('Generated by NL2Playwright')
        script_lines.append('"""')
        script_lines.append('import asyncio')
        script_lines.append('from playwright.async_api import async_playwright, expect')
        script_lines.append('')
        script_lines.append('')
        script_lines.append('async def run():')
        script_lines.append('    async with async_playwright() as p:')
        script_lines.append('        # Launch browser')
        script_lines.append('        browser = await p.chromium.launch(headless=False, slow_mo=500)')
        script_lines.append('        context = await browser.new_context()')
        script_lines.append('        page = await context.new_page()')
        script_lines.append('')
        
        # Track pages/tabs
        pages_created = {'page': 0}
        current_page_var = 'page'
        
        # Generate actions
        for action in actions:
            # Add comment
            if action.comment:
                script_lines.append(f'        # {action.comment}')
            
            # Generate action code with await
            if action.action_type == 'goto':
                script_lines.append(f'        await {current_page_var}.goto("{action.url}")')
                script_lines.append(f'        await {current_page_var}.wait_for_load_state("networkidle")')
                
            elif action.action_type == 'click':
                script_lines.append(f'        await {current_page_var}.locator(\'{action.selector}\').click()')
                script_lines.append(f'        await {current_page_var}.wait_for_load_state("domcontentloaded")')
                
            elif action.action_type == 'fill':
                script_lines.append(f'        await {current_page_var}.locator(\'{action.selector}\').fill("{action.value}")')
                
            elif action.action_type == 'press':
                script_lines.append(f'        await {current_page_var}.keyboard.press("{action.value}")')
                
            elif action.action_type == 'scroll':
                if ':' in action.value:
                    direction, amount = action.value.split(':')
                    if direction == 'down':
                        script_lines.append(f'        await {current_page_var}.mouse.wheel(0, {amount})')
                    else:
                        script_lines.append(f'        await {current_page_var}.mouse.wheel(0, -{amount})')
                else:
                    script_lines.append(f'        await {current_page_var}.evaluate("window.scrollBy(0, window.innerHeight)")')
                    
            elif action.action_type == 'wait':
                duration = int(action.value)
                script_lines.append(f'        await {current_page_var}.wait_for_timeout({duration})')
                
            elif action.action_type == 'new_tab':
                new_page_num = len(pages_created)
                new_page_var = f'page{new_page_num}' if new_page_num > 0 else 'page'
                pages_created[new_page_var] = new_page_num
                script_lines.append(f'        {new_page_var} = await context.new_page()')
                current_page_var = new_page_var
                
            elif action.action_type == 'switch_tab':
                tab_idx = int(action.value)
                if tab_idx == 0:
                    current_page_var = 'page'
                else:
                    current_page_var = f'page{tab_idx}'
                script_lines.append(f'        # Switching to {current_page_var}')
                
            elif action.action_type == 'alert':
                if ':' in action.value:
                    alert_action, text = action.value.split(':', 1)
                else:
                    alert_action = action.value
                    text = None
                    
                if alert_action == 'accept':
                    script_lines.append(f'        {current_page_var}.on("dialog", lambda dialog: dialog.accept())')
                elif alert_action == 'dismiss':
                    script_lines.append(f'        {current_page_var}.on("dialog", lambda dialog: dialog.dismiss())')
                elif alert_action == 'text' and text:
                    script_lines.append(f'        {current_page_var}.on("dialog", lambda dialog: dialog.accept("{text}"))')
            
            script_lines.append('')
        
        # Footer
        script_lines.append('        # Keep browser open for inspection')
        script_lines.append('        # input("Press Enter to close browser...")')
        script_lines.append('')
        script_lines.append('        await browser.close()')
        script_lines.append('')
        script_lines.append('')
        script_lines.append('if __name__ == "__main__":')
        script_lines.append('    asyncio.run(run())')
        script_lines.append('')
        
        return '\n'.join(script_lines)
