{"file_contents":{"automation_engine.py":{"content":"import os\nfrom typing import Optional\nfrom browser_use import Agent, Browser, BrowserProfile, ChatOpenAI\n\nclass BrowserAutomationEngine:\n    def __init__(\n        self,\n        api_key: str,\n        model: str = \"gpt-4o-mini\",\n        headless: bool = False,\n        verbose: bool = False\n    ):\n        self.api_key = api_key\n        self.model = model\n        self.headless = headless\n        self.verbose = verbose\n        \n        self.llm = self._initialize_llm()\n        self.browser = self._initialize_browser()\n    \n    def _initialize_llm(self) -> ChatOpenAI:\n        # the newest OpenAI model is \"gpt-4o-mini\" which was released August 7, 2025.\n        # do not change this unless explicitly requested by the user\n        llm = ChatOpenAI(\n            model=self.model,\n            api_key=self.api_key\n        )\n        \n        if self.verbose:\n            print(f\"✓ Initialized LLM: {self.model}\")\n        \n        return llm\n    \n    def _initialize_browser(self) -> Browser:\n        import shutil\n        \n        chromium_path = os.getenv(\"CHROMIUM_PATH\")\n        if not chromium_path:\n            chromium_path = shutil.which(\"chromium\") or shutil.which(\"chromium-browser\") or shutil.which(\"chrome\")\n        \n        if chromium_path:\n            if self.verbose:\n                print(f\"✓ Using Chromium at: {chromium_path}\")\n            profile = BrowserProfile(\n                headless=self.headless,\n                executable_path=chromium_path\n            )\n        else:\n            profile = BrowserProfile(\n                headless=self.headless\n            )\n        \n        browser = Browser(\n            browser_profile=profile\n        )\n        \n        if self.verbose:\n            print(f\"✓ Initialized Browser (headless={self.headless})\")\n        \n        return browser\n    \n    async def run_task(self, task: str) -> Optional[str]:\n        if self.verbose:\n            print(f\"\\n🎯 Creating agent for task: {task}\\n\")\n        \n        agent = Agent(\n            task=task,\n            llm=self.llm,\n            browser=self.browser,\n        )\n        \n        if self.verbose:\n            print(\"🔄 Agent created, starting execution...\\n\")\n        \n        history = await agent.run()\n        \n        if self.verbose:\n            print(f\"\\n📊 Task execution completed\")\n            print(f\"   Steps taken: {len(history.history) if hasattr(history, 'history') else 'N/A'}\")\n        \n        result = self._extract_result(history)\n        \n        return result\n    \n    def _extract_result(self, history) -> Optional[str]:\n        if not history:\n            return None\n        \n        if hasattr(history, 'final_result'):\n            return str(history.final_result())\n        \n        if hasattr(history, 'history') and history.history:\n            last_action = history.history[-1]\n            if hasattr(last_action, 'result'):\n                return str(last_action.result)\n        \n        return \"Task completed successfully\"\n","size_bytes":2984},"test_simple.py":{"content":"#!/usr/bin/env python3\nimport asyncio\nimport sys\nfrom automation_engine import BrowserAutomationEngine\nimport os\n\nasync def test():\n    api_key = os.getenv(\"OPENAI_API_KEY\")\n    if not api_key:\n        print(\"Error: OPENAI_API_KEY not found\")\n        sys.exit(1)\n    \n    print(\"Testing AI Browser Automation CLI\")\n    print(\"Task: Go to example.com and get the page title\")\n    \n    engine = BrowserAutomationEngine(\n        api_key=api_key,\n        model=\"gpt-4o-mini\",\n        headless=True,\n        verbose=True\n    )\n    \n    result = await engine.run_task(\"Go to example.com and tell me the page title\")\n    print(f\"\\n\\nFinal Result: {result}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(test())\n","size_bytes":703},"replit.md":{"content":"# AI Browser Automation CLI - Project Documentation\n\n## Overview\nA Python CLI tool that performs OpenAI-powered browser automation with comprehensive basic and advanced capabilities. Users describe tasks in natural language, and the AI handles the browser automation.\n\n## Current State\n- **Status**: Active Development\n- **Language**: Python 3.11\n- **Framework**: browser-use + OpenAI gpt-4o-mini + LangChain\n- **Last Updated**: October 22, 2025\n\n## Recent Changes\n### October 22, 2025\n- Initial project setup\n- Installed dependencies: browser-use, langchain-openai, python-dotenv, playwright\n- Installed Chromium browser via Nix system dependencies\n- Created core CLI application (main.py)\n- Implemented browser automation engine (automation_engine.py)\n- Added project documentation (README.md)\n\n## Project Architecture\n\n### Main Components\n1. **main.py** - CLI entry point with argument parsing\n2. **automation_engine.py** - Core automation logic with browser-use and OpenAI integration\n3. **.env** - Environment variables (not in git, use .env.example as template)\n\n### Dependencies\n- **browser-use (0.5.9)**: AI-powered browser automation framework\n- **langchain-openai**: OpenAI integration for LangChain\n- **playwright**: Browser automation backend\n- **python-dotenv**: Environment variable management\n- **pydantic**: Data validation and structured outputs\n\n### Technology Stack\n- Python 3.11+\n- OpenAI gpt-4o-mini (newest model, released August 7, 2025)\n- Playwright for browser control\n- LangChain for AI orchestration\n\n## How It Works\n1. User provides natural language task via CLI\n2. CLI loads environment variables and initializes the automation engine\n3. Engine creates OpenAI gpt-4o-mini client and browser instance\n4. browser-use Agent interprets task and executes browser actions\n5. Real-time progress displayed to user\n6. Results returned when task completes\n\n## Usage Examples\n```bash\n# Simple search\npython main.py \"search for Python tutorials on Google\"\n\n# Web scraping\npython main.py \"scrape top 10 Hacker News posts with titles and URLs\"\n\n# Form automation\npython main.py \"fill out contact form with test data\"\n\n# Multi-step workflow\npython main.py \"compare iPhone prices on Amazon and Best Buy\"\n```\n\n## Environment Variables\n- `OPENAI_API_KEY` (required): OpenAI API key for gpt-4o-mini access\n\n## User Preferences\n- None specified yet\n\n## Future Enhancements\n- Structured output support with Pydantic models\n- Task history and session management\n- Configuration file for common tasks\n- Interactive mode for multi-step workflows\n- Video recording capability\n","size_bytes":2580},"README.md":{"content":"# AI Browser Automation CLI\n\nA powerful Python CLI tool that performs OpenAI-powered browser automation with comprehensive basic and advanced capabilities. Simply describe what you want to do in natural language, and let AI handle the browser automation for you.\n\n## Features\n\n- **Natural Language Interface**: Describe tasks in plain English\n- **Advanced Browser Automation**: Navigation, clicking, form filling, data extraction, multi-step workflows\n- **AI-Powered**: Uses OpenAI gpt-4o-mini with browser-use for intelligent task execution\n- **Complex Task Support**: Web scraping, multi-page workflows, data collection across sites\n- **Real-time Progress**: See what the AI is doing as it automates your task\n\n## Prerequisites\n\n- Python 3.11 or higher\n- OpenAI API key ([Get one here](https://platform.openai.com/api-keys))\n\n## Installation\n\n1. Install dependencies:\n```bash\npip install browser-use langchain-openai python-dotenv\n```\n\n2. Install Playwright browser (if not using system Chromium):\n```bash\nplaywright install chromium\n```\n\n3. Set up your OpenAI API key:\n```bash\ncp .env.example .env\n# Edit .env and add your OpenAI API key\n```\n\n**Note:** The tool will automatically detect system Chromium/Chrome. If you need to specify a custom path, set `CHROMIUM_PATH` in your `.env` file.\n\n## Usage\n\n### Basic Usage\n\nRun a task with natural language:\n\n```bash\npython main.py \"search for Python tutorials on Google\"\n```\n\n### Advanced Examples\n\n**Web Scraping:**\n```bash\npython main.py \"scrape the top 10 Hacker News posts with their titles and URLs\"\n```\n\n**Form Automation:**\n```bash\npython main.py \"go to example.com/contact and fill out the contact form with name: John Doe, email: john@example.com\"\n```\n\n**Multi-step Workflows:**\n```bash\npython main.py \"compare prices for iPhone 15 on Amazon and Best Buy\"\n```\n\n**Data Collection:**\n```bash\npython main.py \"find the top 5 Python automation libraries on GitHub and extract their star counts\"\n```\n\n### Command Options\n\n```bash\npython main.py [OPTIONS] \"task description\"\n\nOptions:\n  -h, --help        Show help message\n  --headless        Run browser in headless mode (default: True)\n  --no-headless     Show browser window\n  --model MODEL     OpenAI model to use (default: gpt-4o-mini)\n  --verbose         Show detailed logs\n```\n\n## Examples\n\n### Example 1: Simple Search\n```bash\npython main.py \"search Google for 'best Python IDE'\"\n```\n\n### Example 2: Extract Information\n```bash\npython main.py \"go to news.ycombinator.com and get the title of the top story\"\n```\n\n### Example 3: Multi-step Task\n```bash\npython main.py \"search for 'Replit' on Google, click the first result, and tell me the page title\"\n```\n\n## How It Works\n\n1. You provide a natural language task description\n2. The CLI initializes the browser automation agent with OpenAI\n3. The AI agent interprets your task and executes the necessary browser actions\n4. You see real-time progress as the agent works\n5. The agent returns the results when complete\n\n## Troubleshooting\n\n**Error: Missing OPENAI_API_KEY**\n- Make sure you've created a `.env` file with your OpenAI API key\n\n**Browser fails to start**\n- Check that Chromium is properly installed\n- Try running with `--no-headless` to see what's happening\n\n## Advanced Usage\n\nThe tool uses the browser-use library which provides:\n- Automatic page navigation\n- Intelligent element detection\n- Form filling\n- Data extraction\n- Multi-page workflows\n- Dynamic content handling\n\n## Technology Stack\n\n- **browser-use**: AI-powered browser automation\n- **OpenAI gpt-4o-mini**: Natural language understanding\n- **Playwright**: Browser automation backend\n- **Python 3.11+**: Modern Python features\n\n## License\n\nMIT License\n","size_bytes":3682},"main.py":{"content":"#!/usr/bin/env python3\nimport argparse\nimport asyncio\nimport sys\nimport os\nfrom dotenv import load_dotenv\nfrom automation_engine import BrowserAutomationEngine\n\ndef print_header():\n    print(\"\\n\" + \"=\"*60)\n    print(\"  AI Browser Automation CLI\")\n    print(\"  Powered by OpenAI & browser-use\")\n    print(\"=\"*60 + \"\\n\")\n\ndef parse_arguments():\n    parser = argparse.ArgumentParser(\n        description=\"AI-powered browser automation using natural language\",\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        epilog=\"\"\"\nExamples:\n  python main.py \"search for Python tutorials on Google\"\n  python main.py \"scrape top 10 Hacker News posts with titles and URLs\"\n  python main.py --no-headless \"go to GitHub and find trending Python repos\"\n        \"\"\"\n    )\n    \n    parser.add_argument(\n        \"task\",\n        type=str,\n        help=\"Natural language description of the task to perform\"\n    )\n    \n    parser.add_argument(\n        \"--headless\",\n        action=\"store_true\",\n        default=False,\n        help=\"Run browser in headless mode (default: True)\"\n    )\n    \n    parser.add_argument(\n        \"--no-headless\",\n        action=\"store_true\",\n        help=\"Show browser window during automation\"\n    )\n    \n    parser.add_argument(\n        \"--model\",\n        type=str,\n        default=\"gpt-4o-mini\",\n        help=\"OpenAI model to use (default: gpt-4o-mini)\"\n    )\n    \n    parser.add_argument(\n        \"--verbose\",\n        action=\"store_true\",\n        help=\"Show detailed logs during execution\"\n    )\n    \n    return parser.parse_args()\n\nasync def main():\n    load_dotenv()\n    \n    api_key = os.getenv('OPENAI_API_KEY')\n    if not api_key:\n        print(\"❌ Error: OPENAI_API_KEY not found in environment variables\")\n        print(\"\\nPlease set your OpenAI API key:\")\n        print(\"1. Copy .env.example to .env\")\n        print(\"2. Add your OpenAI API key to the .env file\")\n        print(\"\\nGet your API key from: https://platform.openai.com/api-keys\")\n        sys.exit(1)\n    \n    args = parse_arguments()\n    \n    headless = args.headless and not args.no_headless\n    \n    print_header()\n    print(f\"📋 Task: {args.task}\")\n    print(f\"🤖 Model: {args.model}\")\n    print(f\"🌐 Headless Mode: {'Yes' if headless else 'No'}\")\n    print(f\"📊 Verbose: {'Yes' if args.verbose else 'No'}\")\n    print(\"\\n\" + \"-\"*60 + \"\\n\")\n    \n    engine = BrowserAutomationEngine(\n        api_key=api_key,\n        model=args.model,\n        headless=headless,\n        verbose=args.verbose\n    )\n    \n    try:\n        print(\"🚀 Starting browser automation...\\n\")\n        result = await engine.run_task(args.task)\n        \n        print(\"\\n\" + \"-\"*60)\n        print(\"✅ Task completed successfully!\")\n        print(\"-\"*60 + \"\\n\")\n        \n        if result:\n            print(\"📄 Result:\")\n            print(result)\n            print()\n        \n    except KeyboardInterrupt:\n        print(\"\\n\\n⚠️  Task interrupted by user\")\n        sys.exit(0)\n    except Exception as e:\n        print(f\"\\n❌ Error: {str(e)}\")\n        if args.verbose:\n            import traceback\n            traceback.print_exc()\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n","size_bytes":3187},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"browser-use>=0.5.9\",\n    \"langchain-openai>=1.0.1\",\n    \"openai>=2.6.0\",\n    \"python-dotenv>=1.1.1\",\n]\n","size_bytes":250}},"version":2}